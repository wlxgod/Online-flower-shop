Index: newsapp/templates/Charts.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <title>Order Detail</title>\r\n    <meta charset=\"UTF-8\"/>\r\n    <meta name=\"author\" content=\"order by dede58.com\"/>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n    <link rel=\"stylesheet\" href=\"/static/css/bootstrap.min.css\"/>\r\n    <link rel=\"stylesheet\" href=\"/static/css/bootstrap-responsive.min.css\"/>\r\n    <link rel=\"stylesheet\" href=\"/static/css/uniform.css\"/>\r\n    <link rel=\"stylesheet\" href=\"/static/css/select2.css\"/>\r\n    <link rel=\"stylesheet\" href=\"/static/css/unicorn.main.css\"/>\r\n    <link rel=\"stylesheet\" href=\"/static/css/unicorn.grey.css\" class=\"skin-color\"/>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\r\n\r\n</head>\r\n<body>\r\n\t\t\r\n\t\t<div id=\"header\">\r\n\t\t\t<h1><a href=\"./dashboard.html\">{{ _('UniAdmin') }}</a></h1>\r\n\t\t</div>\r\n\t\t\r\n\t\t<div id=\"search\">\r\n\t\t\t<input type=\"text\" placeholder=\"请输入搜索内容...\" /><button type=\"submit\" class=\"tip-right\" title=\"Search\"><i class=\"icon-search icon-white\"></i></button>\r\n\t\t</div>\r\n\t\t<div id=\"user-nav\" class=\"navbar navbar-inverse\">\r\n            <ul class=\"nav btn-group\">\r\n                <li class=\"btn btn-inverse\"><a title=\"\" href=\"#\"><i class=\"icon icon-user\"></i> <span class=\"text\">{{ _('Personal datails') }}</span></a></li>\r\n                <li class=\"btn btn-inverse dropdown\" id=\"menu-messages\"><a href=\"#\" data-toggle=\"dropdown\" data-target=\"#menu-messages\" class=\"dropdown-toggle\"><i class=\"icon icon-envelope\"></i> <span class=\"text\">{{ _('Message') }}</span> <span class=\"label label-important\">5</span> <b class=\"caret\"></b></a>\r\n                    <ul class=\"dropdown-menu\">\r\n                        <li><a class=\"sAdd\" title=\"\" href=\"#\">{{ _('New Messages') }}</a></li>\r\n                        <li><a class=\"sInbox\" title=\"\" href=\"#\">{{ _('Inbox') }}</a></li>\r\n                        <li><a class=\"sOutbox\" title=\"\" href=\"#\">{{ _('Outbox') }}</a></li>\r\n                        <li><a class=\"sTrash\" title=\"\" href=\"#\">{{ _('Send') }}</a></li>\r\n                    </ul>\r\n                </li>\r\n                <li class=\"btn btn-inverse\"><a title=\"\" href=\"#\"><i class=\"icon icon-cog\"></i> <span class=\"text\">{{ _('Settings') }}</span></a></li>\r\n                <li class=\"btn btn-inverse\"><a title=\"\" href=\"login.html\"><i class=\"icon icon-share-alt\"></i> <span class=\"text\">{{ _('Logout') }}</span></a></li>\r\n            </ul>\r\n        </div>\r\n            \r\n\t\t{% extends \"SideBar.html\" %}\r\n\r\n\t\t{% block after %}\r\n\r\n\r\n\t\t\r\n\t\t<div id=\"content\">\r\n\t\t\t<div id=\"content-header\">\r\n\t\t\t\t<h1>{{ _('Charts') }} &amp; {{ _('Graphs') }}</h1>\r\n\t\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t\t<a class=\"btn btn-large tip-bottom\" title=\"Manage Files\"><i class=\"icon-file\"></i></a>\r\n\t\t\t\t\t<a class=\"btn btn-large tip-bottom\" title=\"Manage Users\"><i class=\"icon-user\"></i></a>\r\n\t\t\t\t\t<a class=\"btn btn-large tip-bottom\" title=\"Manage Comments\"><i class=\"icon-comment\"></i><span class=\"label label-important\">5</span></a>\r\n\t\t\t\t\t<a class=\"btn btn-large tip-bottom\" title=\"Manage Orders\"><i class=\"icon-shopping-cart\"></i></a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div id=\"breadcrumb\">\r\n\t\t\t\t<a href=\"#\" title=\"Go to Home\" class=\"tip-bottom\"><i class=\"icon-home\"></i>{{ _('Home') }} </a>\r\n\t\t\t\t<a href=\"#\" class=\"current\">{{ _('Charts') }} &amp; {{ _('graphs') }}</a>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"container-fluid\">\r\n\t\t\t\t<div class=\"row-fluid\">\r\n\t\t\t\t\t<div class=\"span12\">\r\n\t\t\t\t\t\t<div class=\"widget-box widget-plain\">\r\n\t\t\t\t\t\t\t<div class=\"widget-content center\">\r\n\t\t\t\t\t\t\t\t<ul class=\"stats-plain\">\r\n\t\t\t\t\t\t\t\t\t<li>\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<h4>{{ revenue }}</h4>\r\n\t\t\t\t\t\t\t\t\t\t<span>{{ _('Total Revenue') }}</span>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li>\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<h4>1433</h4>\r\n\t\t\t\t\t\t\t\t\t\t<span>{{ _('Users Registered') }}</span>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li>\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<h4>8650</h4>\r\n\t\t\t\t\t\t\t\t\t\t<span>{{ _('Completed Orders') }}</span>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li>\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<h4>29</h4>\r\n\t\t\t\t\t\t\t\t\t\t<span>{{ _('Pending Orders') }}</span>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"row-fluid\">\r\n\t\t\t\t\t<div class=\"span12\">\r\n\t\t\t\t\t\t<div class=\"widget-box\">\r\n\t\t\t\t\t\t\t<div class=\"widget-title\">\r\n\t\t\t\t\t\t\t\t<span class=\"icon\">\r\n\t\t\t\t\t\t\t\t\t<i class=\"icon-signal\"></i>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t<h5>{{ _('Line chart') }}</h5>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"widget-content\">\r\n\t\t\t\t\t\t\t\t<div class=\"chart\">\r\n\t\t\t\t\t\t\t\t\t<img src=\"/static/images/Revenue.png\" alt=\"Recent Revenue\">\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\r\n\r\n\t\t\t\t<div class=\"row-fluid\">\r\n\t\t\t\t\t<div id=\"footer\" class=\"span12\">\r\n\t\t\t\t\t\tCopyright &copy; 2021.Group 15 Blizzard All rights reserved.</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n\t\t\r\n            <script src=\"/static/scripts/jquery.min.js\"></script>\r\n\t\t\t<script src=\"/static/scripts/jquery.ui.custom.js\"></script>\r\n\t\t\t<script src=\"/static/scripts/bootstrap.min.js\"></script>\r\n\t\t\t<script src=\"/static/scripts/jquery.uniform.js\"></script>\r\n\t\t\t<script src=\"/static/scripts/select2.min.js\"></script>\r\n\t\t\t<script src=\"/static/scripts/jquery.dataTables.min.js\"></script>\r\n\t\t\t<script src=\"/static/scripts/unicorn.js\"></script>\r\n\t\t\t<script src=\"/static/scripts/unicorn.tables.js\"></script>\r\n\r\n\t\t\t<script>\r\n\t\t\t\t$(document).ready(function(){\r\n\t\t\t\t\tvar AddActive= document.querySelector('#ChartSide');\r\n\t\t\t\t\tAddActive.className = 'active';\r\n\t\t\t\t\t//为啥这个不能用？   该死  看来我的jQuery 也得补课了\r\n\t\t\t\t\t$('#ChartSide').className = 'active';\r\n\t\t\t\t\t})\r\n\t\t\t</script>\r\n\r\n\t</body>\r\n</html>\r\n\r\n\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/newsapp/templates/Charts.html b/newsapp/templates/Charts.html
--- a/newsapp/templates/Charts.html	(revision 5eaa6a6ba8576403dede54d4e06fa0f8debd2187)
+++ b/newsapp/templates/Charts.html	(date 1621408640776)
@@ -67,7 +67,7 @@
 								<ul class="stats-plain">
 									<li>										
 										<h4>{{ revenue }}</h4>
-										<span>{{ _('Total Revenue') }}</span>
+										<span>Total Revenue</span>
 									</li>
 									<li>										
 										<h4>1433</h4>
Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from newsapp import app\r\n\r\nif __name__ == '__main__':\r\n    \"\"\"db.drop_all()\r\n    db.create_all()\"\"\"\r\n    # test.CreateOrder()\r\n\r\n    app.run(debug = True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 5eaa6a6ba8576403dede54d4e06fa0f8debd2187)
+++ b/app.py	(date 1621406348632)
@@ -4,5 +4,4 @@
     """db.drop_all()
     db.create_all()"""
     # test.CreateOrder()
-
-    app.run(debug = True)
+    app.run()
Index: newsapp/routes.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport string\r\nimport pandas as pd\r\n\r\nfrom flask import render_template, flash, redirect, url_for, session, request, jsonify, make_response\r\nfrom sqlalchemy import and_,or_\r\nfrom werkzeug.security import generate_password_hash, check_password_hash\r\nfrom werkzeug.utils import secure_filename\r\nfrom matplotlib import pyplot as plt\r\nfrom datetime import datetime\r\n\r\n\r\n\r\nfrom newsapp import app, db, config\r\nfrom newsapp.forms import LoginForm, SignupForm, FlowerForm, ChangePasswordForm, CheckoutForm\r\nfrom newsapp.models import Flower, Orders, Basket, Message, Profile, News, Want, Basketlike\r\nfrom newsapp.models import User\r\n\r\nfrom flask_babel import Babel, gettext as _\r\n# from flask_babel import Babel\r\napp.config['BABEL_DEFAULT_LOCALE'] = 'en'\r\nbabel = Babel(app)\r\n\r\n@babel.localeselector\r\ndef get_locale(): # 核心，当网站含有locale的cookie，且符合['zh', 'en']\r\n    cookie = request.cookies.get('locale')\r\n    if cookie in ['zh', 'en']:\r\n        return cookie\r\n    return request.accept_languages.best_match(app.config.get('BABEL_DEFAULT_LOCALE')) # 没有cookie时，默认为 en\r\n\r\n@app.route('/set_locale/<locale>') # 用ajax请求来设置cookie\r\ndef set_locale(locale):\r\n    response = make_response(jsonify(message='update success'))\r\n    if locale:\r\n        response.set_cookie('locale', locale, 60 * 60)\r\n        return response\r\n\r\n@app.route('/test')\r\ndef test():\r\n    return render_template('test.html')\r\n\r\n@app.route('/')\r\n@app.route('/welcome')\r\ndef welcome():\r\n    return render_template('welcome.html')\r\n\r\n\r\n@app.route('/signup', methods=['GET', 'POST'])\r\ndef signup():\r\n    form = SignupForm()\r\n    if form.validate_on_submit():\r\n        if form.password.data != form.password2.data:\r\n            flash('Passwords do not match!')\r\n            return redirect(url_for('signup'))\r\n        passw_hash = generate_password_hash(form.password.data)\r\n        user = User(username=form.username.data, email=form.email.data, identity=\"customer\",password_hash=passw_hash)\r\n        db.session.add(user)\r\n        db.session.commit()\r\n        session[\"USERNAME\"] = user.username\r\n        user = User.query.filter(User.username == form.username.data).first()\r\n        id=user.id\r\n        name = form.username.data\r\n        img_dir = config.Config.PC_UPLOAD_DIR\r\n        print(img_dir)\r\n        img_obj = form.image.data\r\n        img_filename = session.get(\"USERNAME\") + name + str(0) + '_img.jpg'\r\n        img_obj.save(os.path.join(img_dir, img_filename))\r\n        profile=Profile(id=id,name=form.username.data,dob=\"2020-06-30\",gender=0,description=\"No description\",portrait=img_filename,user_id=id)\r\n        db.session.add(profile)\r\n        db.session.commit()\r\n        staff = User.query.filter(User.identity=='staff')\r\n        for s in staff:\r\n            news=News(number=0,sender_id=s.id,receiver_id=id,profile_id=s.id)\r\n            db.session.add(news)\r\n            db.session.commit()\r\n        return redirect('login')\r\n    return render_template('signup.html', title='Register a new user', form=form)\r\n\r\n\r\n@app.route('/signupch', methods=['GET', 'POST'])\r\ndef signupch():\r\n    form = SignupForm()\r\n    if form.validate_on_submit():\r\n        if form.password.data != form.password2.data:\r\n            flash('Passwords do not match!')\r\n            return redirect(url_for('signup'))\r\n        passw_hash = generate_password_hash(form.password.data)\r\n        user = User(username=form.username.data, email=form.email.data, password_hash=passw_hash)\r\n        db.session.add(user)\r\n        db.session.commit()\r\n        session[\"USERNAME\"] = user.username\r\n        return redirect('login')\r\n    return render_template('signupCh.html', title='新用户注册', form=form)\r\n\r\n\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    form = LoginForm()\r\n    if form.validate_on_submit():\r\n        user = User.query.filter(User.username == form.username.data).first()\r\n        if user is None:\r\n            flash(\"Please Register or Retry With a Valid Username\")\r\n            return redirect(url_for('login'))\r\n        if not check_password_hash(user.password_hash, form.password.data):\r\n            flash('Wrong Password')\r\n            return redirect(url_for('login'))\r\n        if form.type.data=='1' and user.identity=='customer':\r\n            flash(\"As a customer,you can not come into the staff page.\")\r\n            return redirect(url_for('login'))\r\n        flash('Login Successfully')\r\n        session['USERNAME'] = user.username\r\n        if form.type.data=='0':\r\n            return redirect('index')\r\n        if form.type.data=='1':\r\n            return redirect('addflower')\r\n    return render_template('login.html', title='Log in', form=form)\r\n\r\n\r\n@app.route('/loginch', methods=['GET', 'POST'])\r\ndef loginch():\r\n    form = LoginForm()\r\n    if form.validate_on_submit():\r\n        user = User.query.filter(User.username == form.username.data).first()\r\n        if user is None:\r\n            flash(\"请用有效的用户名注册或重试\")\r\n            return redirect(url_for('loginch'))\r\n        if not check_password_hash(user.password_hash, form.password.data):\r\n            flash('错误的密码')\r\n            return redirect(url_for('loginch'))\r\n        if form.type.data == '1' and user.identity == 'customer':\r\n            flash(\"作为一个顾客，你不能进入员工端\")\r\n            return redirect(url_for('loginch'))\r\n        flash('登陆成功')\r\n        session['USERNAME'] = user.username\r\n        if form.type.data == '0':\r\n            return redirect('index')\r\n        if form.type.data == '1':\r\n            return redirect('addflower')\r\n    return render_template('loginCh.html', title='登录', form=form)\r\n\r\n\r\n\r\n\r\n# new index page!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n@app.route('/index', methods=['GET', 'POST'])\r\ndef index():\r\n    \"\"\"flower = Flower(name=\"rose\", intro=\"DO the test\", price=100,\r\n                    number=50, img=\"signup.jfif\" ,address=\"CHINESE FOREVER ROAD\")\r\n    db.session.add(flower)\r\n    db.session.commit()\"\"\"\r\n    \"\"\"form=SearchForm()\"\"\"\r\n    posts_query = Flower.query\r\n    posts = posts_query.filter().all()\r\n    posts2 = posts\r\n    username = session.get(\"USERNAME\")\r\n    users = User.query.filter(User.username == username)\r\n    user=users.first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    order_in_dbs = Orders.query.filter().all()\r\n    print(order_in_dbs)\r\n    print(\"---------------------------------\")\r\n    \"\"\"order_in_db=order_in_dbs.first()\"\"\"\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    if want_in_db is None:\r\n        want = Want(user_id=user.id)\r\n        db.session.add(want)\r\n        db.session.commit()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                      state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n        order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id, Basketlike.user_id == user_id).all()\r\n    basket_length = len(basket_in_db_list)\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total*basket.quantity\r\n    content = None\r\n    content = request.form.get('content')\r\n    print(content)\r\n    if content is not None and content != \"搜索\" and content!=\"\":\r\n        posts2 = Flower.query.filter(Flower.name == content).all()\r\n        content = \"\"\r\n    return render_template('newindex.html', posts=posts, baskets=basket_in_db_list, length=basket_length, total=total,\r\n                           order=order_in_db, posts2=posts2,basketslike=basketlike_in_db_list, lengthlike=basketlike_length)\r\n\r\n\r\n\r\n# 原来的category页面\r\n@app.route('/shop', methods=['GET', 'POST'])\r\ndef shop():\r\n    \"\"\"flower = Flower(name=\"rose\", intro=\"DO the test\", price=100,\r\n                    number=50, img=\"signup.jfif\" ,address=\"CHINESE FOREVER ROAD\")\r\n    db.session.add(flower)\r\n    db.session.commit()\"\"\"\r\n    posts_query = Flower.query\r\n    posts = posts_query.filter().all()\r\n    posts2 = posts\r\n    posts3 = posts\r\n    username = session.get(\"USERNAME\")\r\n    users = User.query.filter(User.username == username)\r\n    user = users.first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    order_in_dbs = Orders.query.filter().all()\r\n    print(order_in_dbs)\r\n    print(\"---------------------------------\")\r\n    \"\"\"order_in_db=order_in_dbs.first()\"\"\"\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    if want_in_db is None:\r\n        want = Want(user_id=user.id)\r\n        db.session.add(want)\r\n        db.session.commit()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                       state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n        order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basket_length = len(basket_in_db_list)\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total*basket.quantity\r\n    content = None\r\n    content = request.form.get('amount')\r\n    if content!=None:\r\n        content1=content.split(' ')\r\n        print(content.split(' '))\r\n        num=[]\r\n        for i in content1:\r\n            if i!='' and i!='-':\r\n                num.append(i.split('$')[1])\r\n        low=int(num[0])\r\n        hign=int(num[1])\r\n        posts2 = Flower.query.filter(and_(Flower.price>=low,Flower.price<=hign)).all()\r\n        print(posts)\r\n        print(posts2)\r\n    p = 'default'\r\n    content2 = None\r\n    content2 = request.form.get('content')\r\n    if content2 is not None and content2 != \"搜索\" and content2 != \"\":\r\n        posts3 = Flower.query.filter(Flower.name == content2).all()\r\n        content2 = \"\"\r\n    print(len(posts))\r\n    print(posts3)\r\n    print(posts2)\r\n    print(posts3==posts)\r\n    return render_template('newshop.html', posts=posts, posts2=posts2, posts3=posts3,baskets=basket_in_db_list, length=basket_length, total=total,\r\n                           order=order_in_db, p=p,basketslike=basketlike_in_db_list, lengthlike=basketlike_length,postslength=len(posts),posts3length=len(posts3))\r\n\r\n\r\n@app.route('/SortByAZ', methods=['GET', 'POST'])\r\ndef SortByAZ():\r\n    \"\"\"flower = Flower(name=\"rose\", intro=\"DO the test\", price=100,\r\n                    number=50, img=\"signup.jfif\" ,address=\"CHINESE FOREVER ROAD\")\r\n    db.session.add(flower)\r\n    db.session.commit()\"\"\"\r\n    posts_query = Flower.query\r\n    posts = posts_query.order_by(Flower.name).all()\r\n    posts2 = posts\r\n    username = session.get(\"USERNAME\")\r\n    user = User.query.filter(User.username == username).first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                      state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basket_length = len(basket_in_db_list)\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    total = 0\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total*basket.quantity\r\n    content = None\r\n    content = request.form.get('amount')\r\n    if content!=None:\r\n        content1=content.split(' ')\r\n        print(content.split(' '))\r\n        num=[]\r\n        for i in content1:\r\n            if i!='' and i!='-':\r\n                num.append(i.split('$')[1])\r\n        low=int(num[0])\r\n        hign=int(num[1])\r\n        posts2 = Flower.query.filter(and_(Flower.price>=low,Flower.price<=hign)).all()\r\n        print(posts)\r\n        print(posts2)\r\n    print(posts2)\r\n    p = 'AZ'\r\n    return render_template('newshop.html', posts=posts, posts2=posts2, posts3=posts,baskets=basket_in_db_list, length=basket_length,\r\n                           total=total, order=order_in_db, p=p,basketslike=basketlike_in_db_list, lengthlike=basketlike_length,postslength=len(posts),posts3length=len(posts2))\r\n\r\n\r\n@app.route('/SortByZA', methods=['GET', 'POST'])\r\ndef SortByZA():\r\n    \"\"\"flower = Flower(name=\"rose\", intro=\"DO the test\", price=100,\r\n                    number=50, img=\"signup.jfif\" ,address=\"CHINESE FOREVER ROAD\")\r\n    db.session.add(flower)\r\n    db.session.commit()\"\"\"\r\n    posts_query = Flower.query\r\n    posts = posts_query.order_by(Flower.name.desc()).all()\r\n    posts2 = posts\r\n    username = session.get(\"USERNAME\")\r\n    user = User.query.filter(User.username == username).first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                      state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basket_length = len(basket_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total*basket.quantity\r\n    content = None\r\n    content = request.form.get('amount')\r\n    if content!=None:\r\n        content1=content.split(' ')\r\n        print(content.split(' '))\r\n        num=[]\r\n        for i in content1:\r\n            if i!='' and i!='-':\r\n                num.append(i.split('$')[1])\r\n        low=int(num[0])\r\n        hign=int(num[1])\r\n        posts2 = Flower.query.filter(and_(Flower.price>=low,Flower.price<=hign)).all()\r\n        print(posts)\r\n        print(posts2)\r\n    print(posts2)\r\n    p = 'ZA'\r\n    return render_template('newshop.html', posts=posts, posts2=posts2,posts3=posts, baskets=basket_in_db_list, length=basket_length,\r\n                           total=total, order=order_in_db, p=p,basketslike=basketlike_in_db_list, lengthlike=basketlike_length,postslength=len(posts),posts3length=len(posts2))\r\n\r\n\r\n@app.route('/SortByP', methods=['GET', 'POST'])\r\ndef SortByP():\r\n    \"\"\"flower = Flower(name=\"rose\", intro=\"DO the test\", price=100,\r\n                    number=50, img=\"signup.jfif\" ,address=\"CHINESE FOREVER ROAD\")\r\n    db.session.add(flower)\r\n    db.session.commit()\"\"\"\r\n    posts_query = Flower.query\r\n    posts = posts_query.order_by(Flower.price).all()\r\n    posts2 = posts\r\n    username = session.get(\"USERNAME\")\r\n    user = User.query.filter(User.username == username).first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                      state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basket_length = len(basket_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total*basket.quantity\r\n    content = None\r\n    content = request.form.get('amount')\r\n    if content!=None:\r\n        content1=content.split(' ')\r\n        print(content.split(' '))\r\n        num=[]\r\n        for i in content1:\r\n            if i!='' and i!='-':\r\n                num.append(i.split('$')[1])\r\n        low=int(num[0])\r\n        hign=int(num[1])\r\n        posts2 = Flower.query.filter(and_(Flower.price>=low,Flower.price<=hign)).all()\r\n        print(posts)\r\n        print(posts2)\r\n    print(posts2)\r\n    p = 'price'\r\n    return render_template('newshop.html', posts=posts, posts2=posts2, posts3=posts,baskets=basket_in_db_list, length=basket_length,\r\n                           total=total, order=order_in_db, p=p,basketslike=basketlike_in_db_list, lengthlike=basketlike_length,postslength=len(posts),posts3length=len(posts2))\r\n\r\n@app.route('/SortByS', methods=['GET', 'POST'])\r\ndef SortByS():\r\n    \"\"\"flower = Flower(name=\"rose\", intro=\"DO the test\", price=100,\r\n                    number=50, img=\"signup.jfif\" ,address=\"CHINESE FOREVER ROAD\")\r\n    db.session.add(flower)\r\n    db.session.commit()\"\"\"\r\n    posts_query = Flower.query\r\n    posts = posts_query.all()\r\n    orders = Orders.query.filter(Orders.state != 'unpayment').all()\r\n    baskets = []\r\n    Nbaskets = []\r\n    sort = {}\r\n    so = []\r\n    posts2 = []\r\n    for p in posts:\r\n        sort[p] = 0\r\n    for o in orders:\r\n        if Basket.query.filter(Basket.order_id == o.id).first() is not None:\r\n            baskets.append(Basket.query.filter(Basket.order_id == o.id).all())\r\n    for b in baskets:\r\n        for c in b:\r\n            Nbaskets.append(c)\r\n    for p in posts:\r\n        for n in Nbaskets:\r\n            if p.id == n.flower_id:\r\n                sort[p] = sort.get(p)+n.quantity\r\n    for s in sort:\r\n        so.append(sort.get(s))\r\n    so.sort(reverse=True)\r\n    for s in so:\r\n        if so.count(s) > 1:\r\n            so.remove(s)\r\n    print(so)\r\n    for s in so:\r\n        for i in sort:\r\n            if s == sort.get(i):\r\n                posts2.append(i)\r\n    print(sort)\r\n    print(posts2)\r\n    username = session.get(\"USERNAME\")\r\n    user = User.query.filter(User.username == username).first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                      state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basket_length = len(basket_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total*basket.quantity\r\n    content = None\r\n    content = request.form.get('amount')\r\n    if content!=None:\r\n        content1=content.split(' ')\r\n        print(content.split(' '))\r\n        num=[]\r\n        for i in content1:\r\n            if i!='' and i!='-':\r\n                num.append(i.split('$')[1])\r\n        low=int(num[0])\r\n        hign=int(num[1])\r\n        posts2 = Flower.query.filter(and_(Flower.price>=low,Flower.price<=hign)).all()\r\n        print(posts)\r\n        print(posts2)\r\n    print(posts2)\r\n    p = 'sales'\r\n    return render_template('newshop.html', posts=posts, posts2=posts2, posts3=posts,baskets=basket_in_db_list, length=basket_length,\r\n                           total=total, order=order_in_db, p=p,basketslike=basketlike_in_db_list, lengthlike=basketlike_length,postslength=len(posts),posts3length=len(posts2))\r\n\r\n@app.route('/Filter_N', methods=['GET', 'POST'])\r\ndef Filter_N():\r\n    \"\"\"flower = Flower(name=\"rose\", intro=\"DO the test\", price=100,\r\n                    number=50, img=\"signup.jfif\" ,address=\"CHINESE FOREVER ROAD\")\r\n    db.session.add(flower)\r\n    db.session.commit()\"\"\"\r\n    posts_query = Flower.query\r\n    print('yes')\r\n    print(request.values.getlist('customCheck'))\r\n    option = request.values.getlist('customCheck')\r\n    min = option[0]\r\n    max = 0\r\n    for s in option:\r\n        if int(s) > int(max):\r\n            max = int(s)\r\n        if int(s) < int(min):\r\n            min = int(s)\r\n    max = max + 10\r\n    if int(option[len(option) - 1]) != 30:\r\n        posts = posts_query.filter(and_(Flower.number >= min, Flower.number <= max)).all()\r\n    if int(option[len(option)-1]) == 30:\r\n        posts = posts_query.filter(Flower.name >= min).all()\r\n    print(max, min)\r\n    if len(option)>1:\r\n        if int(option[0]) == 0 and int(option[1]) == 20 and len(option) == 2:\r\n            posts = Flower.query.filter(or_(and_(Flower.number >= 20, Flower.number <= 30), and_(Flower.number >= 0, Flower.number <= 10))).all()\r\n        if int(option[0]) == 0 and int(option[1]) == 30 and len(option) == 2:\r\n            posts = Flower.query.filter(or_(Flower.number >= 30, and_(Flower.number >= 0, Flower.number <= 10))).all()\r\n        if int(option[0]) == 10 and int(option[1]) == 30 and len(option) == 2:\r\n            posts = Flower.query.filter(or_(Flower.number >= 30, and_(Flower.number >= 10, Flower.number <= 20))).all()\r\n        if int(option[0]) == 0 and int(option[1]) == 10 and len(option) == 3 and int(option[2] == 30):\r\n            posts = Flower.query.filter(or_(Flower.number >= 30, and_(Flower.number >= 0, Flower.number <= 20))).all()\r\n    posts2 = posts\r\n    print(posts2)\r\n    username = session.get(\"USERNAME\")\r\n    user = User.query.filter(User.username == username).first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                      state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basket_length = len(basket_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total*basket.quantity\r\n    content = None\r\n    content = request.form.get('amount')\r\n    if content!=None:\r\n        content1=content.split(' ')\r\n        print(content.split(' '))\r\n        num=[]\r\n        for i in content1:\r\n            if i!='' and i!='-':\r\n                num.append(i.split('$')[1])\r\n        low=int(num[0])\r\n        hign=int(num[1])\r\n        posts2 = Flower.query.filter(and_(Flower.price>=low,Flower.price<=hign)).all()\r\n        print(posts)\r\n        print(posts2)\r\n    p = 'default'\r\n    print(posts2)\r\n    return render_template('newshop.html', posts=posts, posts2=posts2, posts3=posts,baskets=basket_in_db_list, length=basket_length,\r\n                           total=total, order=order_in_db, p=p,basketslike=basketlike_in_db_list, lengthlike=basketlike_length,postslength=len(posts),posts3length=len(posts2))\r\n\r\n\r\n\r\n\r\n\r\n@app.route('/detail/<id>', methods=['GET', 'POST'])\r\ndef detail(id):\r\n    posts = Flower.query.filter().all()\r\n    flower = Flower.query.filter(Flower.id == id).first()\r\n    print(flower.id)\r\n    posts_query = Flower.query\r\n    posts = posts_query.filter().all()\r\n    posts2 = posts\r\n    posts3 = posts\r\n    username = session.get(\"USERNAME\")\r\n    users = User.query.filter(User.username == username)\r\n    user = users.first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    order_in_dbs = Orders.query.filter().all()\r\n    print(order_in_dbs)\r\n    print(\"---------------------------------\")\r\n    \"\"\"order_in_db=order_in_dbs.first()\"\"\"\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    if want_in_db is None:\r\n        want = Want(user_id=user.id)\r\n        db.session.add(want)\r\n        db.session.commit()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                       state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n        order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basket_length = len(basket_in_db_list)\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total * basket.quantity\r\n    return render_template('newproduct-details.html',flower=flower,posts=posts,posts2=posts2, posts3=posts3,baskets=basket_in_db_list, length=basket_length, total=total,\r\n                           order=order_in_db,basketslike=basketlike_in_db_list, lengthlike=basketlike_length,postslength=len(posts),posts3length=len(posts3))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n@app.route(\"/RemoveBasketlike\",methods=['GET', 'POST'])\r\ndef RemoveBasketlike():\r\n    if session.get(\"USERNAME\") is None:\r\n        return redirect(\"login\")\r\n    else:\r\n        username = session.get(\"USERNAME\")\r\n        user = User.query.filter(User.username == username).first()\r\n        user_id = user.id\r\n        basketlikeId = request.form['id']\r\n        print(basketlikeId)\r\n        basketlike_in_db = Basketlike.query.filter(Basketlike.id == basketlikeId).first()\r\n        db.session.delete(basketlike_in_db)\r\n        db.session.commit()\r\n        want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n        basketlike_in_db_list = Basketlike.query.filter(\r\n            and_(Basketlike.want_id == want_in_db.id, Basketlike.user_id == user_id)).all()\r\n        basketlike_length = len(basketlike_in_db_list)\r\n        return jsonify({'message': 'remove to Trolley successfully!','id': basketlikeId,'length':basketlike_length})\r\n\r\n\r\n\r\n\r\n@app.route(\"/RemoveBasket\",methods=['GET', 'POST'])\r\ndef RemoveBasket():\r\n    if session.get(\"USERNAME\") is None:\r\n        return redirect(\"login\")\r\n    else:\r\n        username = session.get(\"USERNAME\")\r\n        user = User.query.filter(User.username == username).first()\r\n        user_id = user.id\r\n        basketId = request.form['id']\r\n        print(basketId)\r\n        basket_in_db = Basket.query.filter(Basket.id == basketId).first()\r\n        db.session.delete(basket_in_db)\r\n        db.session.commit()\r\n        order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n        basket_in_db_list = Basket.query.filter(\r\n            and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n        basket_length = len(basket_in_db_list)\r\n        total = 0\r\n        for basket in basket_in_db_list:\r\n            total = total + basket.total*basket.quantity\r\n        return jsonify({'message': 'remove to Trolley successfully!','id': basketId,'length':basket_length,'total':total})\r\n\r\n\r\n@app.route(\"/PaymentOrder\")\r\ndef PaymentOrder():\r\n    if session.get(\"USERNAME\") is None:\r\n        return redirect(\"login\")\r\n    else:\r\n        orderId = int(request.args.get('orderId'))\r\n        username = session.get(\"USERNAME\")\r\n        user = User.query.filter(User.username == username).first()\r\n        user_id = user.id\r\n        order_in_db = Orders.query.filter(\r\n            and_(Orders.state == \"unpayment\", Orders.user_id == user_id, Orders.id == orderId)).first()\r\n        order_in_db.state = \"Transporting\"\r\n        db.session.commit()\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                      state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n        return redirect(url_for('complete'))\r\n\r\n\r\n@app.route(\"/addToCart\",methods=['GET', 'POST'])\r\ndef addToCart():\r\n    if session.get(\"USERNAME\") is None:\r\n        return redirect(\"login\")\r\n    else:\r\n        username = session.get(\"USERNAME\")\r\n        user = User.query.filter(User.username == username).first()\r\n        user_id = user.id\r\n        orders_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).all()\r\n        flag = 1\r\n        if orders_in_db is not None:\r\n            for order in orders_in_db:\r\n                if order.state == 'unpayment':\r\n                    flag = 0\r\n        else:\r\n            flag = 1\r\n        if flag == 1:\r\n            order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                          state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n            db.session.add(order)\r\n            db.session.commit()\r\n        productId = request.form['id']\r\n        quantity=request.form['quantity']\r\n        flowername=request.form['name']\r\n        print(productId)\r\n        print(flowername)\r\n        if productId!='100':\r\n            flower_in_db = Flower.query.filter(Flower.id == productId).first()\r\n        else:\r\n            flower_in_db = Flower.query.filter(Flower.name == flowername).first()\r\n        orders_in_db_test=Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n        order_id = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first().id\r\n        basket = Basket(name=flower_in_db.name, quantity=quantity, total=flower_in_db.price, user_id=user_id,\r\n                        flower_id=flower_in_db.id, order_id=order_id)\r\n        basketImg = flower_in_db.img\r\n        basketQuantity=basket.quantity\r\n        basketTotal=int(basket.total)*int(quantity)\r\n        db.session.add(basket)\r\n        db.session.commit()\r\n        order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n        order_in_db.price = order_in_db.price + basket.total*basket.quantity\r\n        print(\"order_in_db.price_after:\")\r\n        print(order_in_db.price)\r\n        db.session.commit()\r\n        order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n        basket_in_db_list = Basket.query.filter(\r\n            and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n        basket_length = len(basket_in_db_list)\r\n        basketId=basket_length\r\n        print(basketId)\r\n        \"\"\"order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n        print(order_in_db.price)\"\"\"\r\n        return jsonify({'message': 'Add to Trolley successfully!','length':basket_length,'id': basketId,'img':basketImg,'quantity':basketQuantity,'total':basketTotal})\r\n\r\n@app.route(\"/addToLike\",methods=['GET', 'POST'])\r\ndef addToLike():\r\n    if session.get(\"USERNAME\") is None:\r\n        return redirect(\"login\")\r\n    else:\r\n        username = session.get(\"USERNAME\")\r\n        user = User.query.filter(User.username == username).first()\r\n        user_id = user.id\r\n        wants_in_db = Want.query.filter(Orders.user_id == user_id).all()\r\n        flag = 1\r\n        if wants_in_db is not None:\r\n            flag=0\r\n        if flag == 1:\r\n            want = Want(user_id=user.id)\r\n            db.session.add(want)\r\n            db.session.commit()\r\n        productId = request.form['id']\r\n        quantity=request.form['quantity']\r\n        flowername=request.form['name']\r\n        print(productId)\r\n        print(flowername)\r\n        if productId!='100':\r\n            flower_in_db = Flower.query.filter(Flower.id == productId).first()\r\n        else:\r\n            flower_in_db = Flower.query.filter(Flower.name == flowername).first()\r\n        want_id = Want.query.filter(Want.user_id == user_id).first().id\r\n        basketlike = Basketlike(name=flower_in_db.name, user_id=user_id,\r\n                        flower_id=flower_in_db.id, want_id=want_id)\r\n        basketlikeImg = flower_in_db.img\r\n        db.session.add(basketlike)\r\n        db.session.commit()\r\n        want_in_db = Want.query.filter( Want.user_id == user_id).first()\r\n        db.session.commit()\r\n        want_in_db = Want.query.filter( Want.user_id == user_id).first()\r\n        basketlike_in_db_list = Basketlike.query.filter(\r\n            and_(Basketlike.want_id == want_in_db.id, Basketlike.user_id == user_id)).all()\r\n        basketlike_length = len(basketlike_in_db_list)\r\n        basketId=basketlike_length\r\n        print(basketId)\r\n        \"\"\"order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n        print(order_in_db.price)\"\"\"\r\n        return jsonify({'message': 'Add to Wishlist successfully!','length':basketlike_length,'id': basketId,'img':basketlikeImg})\r\n\r\n\r\n@app.route('/checkout',methods=['GET', 'POST'])\r\ndef checkout():\r\n    posts_query = Flower.query\r\n    posts = posts_query.filter().all()\r\n    posts2 = posts\r\n    username = session.get(\"USERNAME\")\r\n    users = User.query.filter(User.username == username)\r\n    user = users.first()\r\n    user_id = user.id\r\n    order_in_dbs = Orders.query\r\n    print(order_in_dbs)\r\n    print(\"---------------------------------\")\r\n    order_in_db = order_in_dbs.first()\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    if want_in_db is None:\r\n        want = Want(user_id=user.id)\r\n        db.session.add(want)\r\n        db.session.commit()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                      state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basket_length = len(basket_in_db_list)\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total * basket.quantity\r\n    form = CheckoutForm()\r\n    if form.validate_on_submit():\r\n        return 0\r\n    return render_template('checkout.html', posts=posts, baskets=basket_in_db_list, length=basket_length, total=total,\r\n                           order=order_in_db, posts2=posts2,basketslike=basketlike_in_db_list, lengthlike=basketlike_length,form=form)\r\n\r\n\r\n@app.route('/complete')\r\ndef complete():\r\n    return render_template('complete.html')\r\n\r\n\r\n@app.route('/about_us')\r\ndef about_us():\r\n    posts_query = Flower.query\r\n    posts = posts_query.filter().all()\r\n    posts2 = posts\r\n    username = session.get(\"USERNAME\")\r\n    users = User.query.filter(User.username == username)\r\n    user = users.first()\r\n    user_id = user.id\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    order_in_dbs = Orders.query.filter().all()\r\n    print(order_in_dbs)\r\n    print(\"---------------------------------\")\r\n    \"\"\"order_in_db=order_in_dbs.first()\"\"\"\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    if want_in_db is None:\r\n        want = Want(user_id=user.id)\r\n        db.session.add(want)\r\n        db.session.commit()\r\n    if order_in_db is None:\r\n        order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                       state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n        db.session.add(order)\r\n        db.session.commit()\r\n        order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basket_length = len(basket_in_db_list)\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    total = 0\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total * basket.quantity\r\n    return render_template('newabout_us.html', posts=posts, baskets=basket_in_db_list, length=basket_length, total=total,\r\n                           order=order_in_db, posts2=posts2,basketslike=basketlike_in_db_list, lengthlike=basketlike_length)\r\n\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n    if session['USERNAME'] is None:\r\n        return redirect(url_for('signup'))\r\n    session.pop(\"USERNAME\", None)\r\n    return redirect(url_for('signup'))\r\n\r\n\r\n@app.route('/addflower', methods=['GET', 'POST'])\r\ndef addflower():\r\n    form = FlowerForm()\r\n    if session.get(\"USERNAME\") is None:\r\n        flash(\"Please login first\")\r\n        return redirect(\"login\")\r\n    else:\r\n        username = session.get(\"USERNAME\")\r\n        users = User.query.filter(User.username == username)\r\n        user = users.first()\r\n        if user.identity=='customer':\r\n            flash(\"As a customer,you can not access this page.\")\r\n            return redirect(\"login\")\r\n        if form.validate_on_submit():\r\n            name = form.name.data\r\n            img_dir = config.Config.PC_UPLOAD_DIR\r\n            print(img_dir)\r\n            imgs_obj = form.image.data\r\n            i=0\r\n            img1=\"\"\r\n            for img_obj in imgs_obj:\r\n                if i==0:\r\n                    img_filename = session.get(\"USERNAME\") + name + str(i)+'_img.jpg'\r\n                    img_obj.save(os.path.join(img_dir, img_filename))\r\n                else:\r\n                    img1=session.get(\"USERNAME\") + name + str(i)+'_img.jpg'\r\n                    img_obj.save(os.path.join(img_dir, img1))\r\n                i=i+1\r\n            flower = Flower(name=form.name.data, intro=form.detail.data, price=form.price.data, number=form.number.data,\r\n                            img=img_filename, img1=img1,address=form.address.data)\r\n            print(\"caocaocao3\")\r\n            db.session.add(flower)\r\n            db.session.commit()\r\n            flash(\"'Add flower successfully!\")\r\n            return redirect(url_for('index'))\r\n        else:\r\n            return render_template('addFlowers.html', title='add flowers', form=form)\r\n\r\n\r\n@app.route('/checkusername', methods=['POST'])\r\ndef check_username():\r\n    chosen_name = request.form['username']\r\n    user_in_db = User.query.filter(User.username == chosen_name).first()\r\n    if not user_in_db:\r\n        return jsonify({'text': 'Username is available',\r\n                        'returnvalue': 0})\r\n    else:\r\n        return jsonify({'text': 'Username is already taken',\r\n                        'returnvalue': 1})\r\n\r\n\r\n@app.route('/checkemail', methods=['POST'])\r\ndef check_email():\r\n    chosen_email = request.form['email']\r\n    user_in_db = User.query.filter(User.email == chosen_email).first()\r\n    if not user_in_db:\r\n        return jsonify({'text': 'This Email is available',\r\n                        'returnvalue': 0})\r\n    else:\r\n        return jsonify({'text': 'This Email is already taken',\r\n                        'returnvalue': 1})\r\n\r\n\r\n@app.route('/OrderDisplay', methods=['GET', 'POST'])\r\ndef OrderDisplay():\r\n    if session.get(\"USERNAME\") is None:\r\n        flash(\"Please login first\")\r\n        return redirect(\"login\")\r\n    username = session.get(\"USERNAME\")\r\n    users = User.query.filter(User.username == username)\r\n    user = users.first()\r\n    if user.identity=='customer':\r\n        flash(\"As a customer,you can not access this page.\")\r\n        return redirect(\"login\")\r\n    orders = Orders.query.all()\r\n    order = Orders.query.filter(Orders.id == 1)\r\n    return render_template('OrderDisplay.html', title='Order Display', orders=orders, order=order)\r\n\r\n\r\n@app.route('/OrderDetail/<order_id>', methods=['GET', 'POST'])\r\ndef OrderDetail(order_id):\r\n    order = Orders.query.filter(Orders.id == order_id).first()\r\n    user = User.query.filter(User.id == order.user_id).first()\r\n    orders = Orders.query.filter(Orders.user_id == user.id)\r\n    flowers = Flower.query.all()\r\n    baskets = Basket.query.filter(Basket.order_id == order_id)\r\n    total = 0\r\n    for basket in baskets:\r\n        total = total + basket.total\r\n    return render_template('OrderDetail.html', title='Order Display', order=order, flowers=flowers, orders=orders,\r\n                           total=total, baskets=baskets)\r\n\r\n@app.route('/Modify/<flower_id>', methods=['GET', 'POST'])\r\ndef Modify(flower_id):\r\n    flower = Flower.query.filter(Flower.id == flower_id).first()\r\n    flowers = Flower.query.all()\r\n    if request.method == 'POST':\r\n        if request.values.get('t'):\r\n            print(request.values.get('t'))\r\n            print(request.values.get('price'))\r\n            # file_obj = request.files.get('photos')\r\n            # print(file_obj)\r\n            img_dir = config.Config.PC_UPLOAD_DIR\r\n            # print(img_dir)\r\n            # img_filename = '1'\r\n            # print(os.path.join(img_dir, img_filename))\r\n\r\n            # print(secure_filename(file_obj.filename))\r\n            flower.name = request.values.get('name')\r\n            flower.intro = request.values.get('detail')\r\n            flower.price = request.values.get('price')\r\n            if request.files.get(\"photos\") != 'null':\r\n                file_obj = request.files.get('photos')\r\n                file_name = secure_filename(file_obj.filename)\r\n                file_obj.save(os.path.join(img_dir, file_name))\r\n                flower.img = file_name\r\n            flower.number = request.values.get('avail')\r\n            db.session.commit()\r\n            return redirect(url_for('Flowers'))\r\n    if request.method == 'GET':\r\n        print(request.method)\r\n        return redirect(url_for('Flowers'))\r\n\r\n@app.route('/ModifyFlower/<flower_id>', methods=['GET', 'POST'])\r\ndef ModFlower(flower_id):\r\n    flower = Flower.query.filter(Flower.id == flower_id).first()\r\n    return render_template('ModifyFlower.html', title='FlowersChange', flower=flower)\r\n\r\n\r\n@app.route('/FlowerGallery', methods=['GET', 'POST'])\r\ndef Flowers():\r\n    if session.get(\"USERNAME\") is None:\r\n        flash(\"Please login first\")\r\n        return redirect(\"login\")\r\n    username = session.get(\"USERNAME\")\r\n    users = User.query.filter(User.username == username)\r\n    user = users.first()\r\n    if user.identity=='customer':\r\n        flash(\"As a customer,you can not access this page.\")\r\n        return redirect(\"login\")\r\n    flowers = Flower.query.all()\r\n    return render_template('FlowerGallery.html', title='Flowers', flowers=flowers)\r\n\r\n@app.route('/Charts', methods=['GET', 'POST'])\r\ndef Charts():\r\n    if session.get(\"USERNAME\") is None:\r\n        flash(\"Please login first\")\r\n        return redirect(\"login\")\r\n    username = session.get(\"USERNAME\")\r\n    users = User.query.filter(User.username == username)\r\n    user = users.first()\r\n    if user.identity=='customer':\r\n        flash(\"As a customer,you can not access this page.\")\r\n        return redirect(\"login\")\r\n    dbEngine= db.get_engine();\r\n    # print(dbEngine)\r\n    ts = pd.read_sql('select timestamp,price from orders',dbEngine)\r\n\r\n    ts=ts.set_index('timestamp')\r\n\r\n    index = list(ts.index)\r\n    index.append(datetime.now())\r\n\r\n    index=pd.to_datetime(index)\r\n    price=list(ts['price'].values)\r\n\r\n    price.append(0.0)\r\n    obj = pd.Series(price, index=index)\r\n    obj = obj.resample('D').sum()\r\n    obj = obj[-30:]\r\n\r\n    revenue = obj.sum()\r\n    print(revenue)\r\n\r\n    index = list(obj.index)\r\n    price = list(obj.values)\r\n\r\n    xaxis = []\r\n\r\n    for i in index:\r\n        xaxis.append(str(i)[5:10])\r\n\r\n    # print(xaxis)\r\n    # print(price)\r\n\r\n    fig = plt.figure(figsize=(20, 6))\r\n    plt.style.use('ggplot')\r\n    ax = fig.add_subplot(1, 1, 1)\r\n    lab = ax.set_xticklabels(labels=xaxis, rotation=40, fontsize='xx-large')\r\n    ax.set_title('Revenue In Last Month')\r\n    plt.plot(xaxis, price, 'go--')\r\n    # plt.show()\r\n    fig.savefig(r'./newsapp/static/images/Revenue.png')\r\n    # print('save le')\r\n\r\n    OrderF=1\r\n    OrderT=2\r\n    Regis=3\r\n\r\n\r\n\r\n    return render_template('Charts.html',revenue=revenue,OrderF=OrderF,OrderT=OrderT,Regis=Regis)\r\n\r\n\r\n\r\n@app.route('/ChatRoom', methods=['GET', 'POST'])\r\ndef ChatRoom():\r\n    staff = User.query.filter(User.username == session['USERNAME']).first().id  # 自己的id\r\n    img = Profile.query.filter(Profile.user_id == staff).first().portrait     # 头像\r\n    # 获取历史聊天用户和新消息数量\r\n    new = News.query.filter(News.receiver_id == staff).order_by(News.number.desc())\r\n    return render_template('ChatRoom.html', title='ChatRoom', news=new, img=img)\r\n\r\n\r\n@app.route('/onlinechat', methods=['GET','POST'])\r\ndef onlinechat():\r\n    user = User.query.filter(User.username == session['USERNAME']).first().id  # 自己的id\r\n    img = Profile.query.filter(Profile.user_id == user).first().portrait  # 头像\r\n    # 获取历史聊天用户和新消息数量\r\n    new = News.query.filter(News.receiver_id == user).order_by(News.number.desc())\r\n    posts_query = Flower.query\r\n    user_id = user\r\n    order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n    posts = posts_query.filter().all()\r\n    want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n    basket_in_db_list = Basket.query.filter(and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n    basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                    Basketlike.user_id == user_id).all()\r\n    basket_length = len(basket_in_db_list)\r\n    basketlike_length = len(basketlike_in_db_list)\r\n    '''print(posts)'''\r\n    total = 0\r\n    for basket in basket_in_db_list:\r\n        total = total + basket.total * basket.quantity\r\n    return render_template('onlinechat.html', title='ChatRoom', news=new, img=img,posts=posts, baskets=basket_in_db_list, length=basket_length, total=total,order=order_in_db,basketslike=basketlike_in_db_list, lengthlike=basketlike_length)\r\n\r\n\r\n@app.route('/shownews', methods=['GET', 'POST'])\r\ndef shownews():\r\n    id1 = User.query.filter(User.username == session['USERNAME']).first().id  # 自己的id\r\n    id2 = request.form['user_id']  # 顾客的id\r\n    print(id1)\r\n    print(id2)\r\n    user_news = News.query.filter(and_(News.sender_id == id2, News.receiver_id == id1)).first()\r\n    user_news.number = 0  # 未读消息归0\r\n    db.session.commit()\r\n    message = Message.query.filter(or_((and_(Message.sender_id == id1, Message.receiver_id == id2)),\r\n                                       (and_(Message.sender_id == id2, Message.receiver_id == id1)))).order_by(\r\n        Message.timestamp)  # 聊天记录和新消息\r\n    print(message.count())\r\n    news = []\r\n    # 转化为字典list\r\n    for new in message:\r\n        news.append(new.to_json())\r\n    print(len(news))\r\n    return jsonify(news)\r\n\r\n\r\n@app.route('/sendnew', methods=['POST'])\r\ndef sendnew():\r\n    receiver_id = request.form['receiver_id'] # 接受者\r\n    text = request.form['text']     # 消息\r\n    user_id = User.query.filter(User.username == session['USERNAME']).first().id # 发送者\r\n    message = Message(text=text, sender_id=user_id, receiver_id=receiver_id, state='read') # 写入新消息\r\n    news = News.query.filter(and_(News.sender_id == user_id, News.receiver_id == receiver_id)).first()    # 查找新消息数量的记录\r\n    print(user_id)\r\n    profile_id = Profile.query.filter(Profile.user_id == user_id).first().id      # 发送者资料的id\r\n    if not news:\r\n        news = News(number=1, sender_id=user_id, receiver_id=receiver_id, profile_id=profile_id)\r\n        db.session.add(news)\r\n    else:\r\n        news.number = news.number+1               # 新消息加一\r\n    db.session.add(message)\r\n    db.session.commit()\r\n    return jsonify({'state': 'yes'})\r\n\r\n\r\n@app.route('/current_user', methods=['GET', 'POST'])\r\ndef current_user():\r\n    user_id = User.query.filter(User.username == session['USERNAME']).first().id\r\n    return jsonify({'id': user_id})\r\n@app.route('/Delete/<flower_id>', methods=['GET', 'POST'])\r\ndef Delete(flower_id):\r\n    flower = Flower.query.filter(Flower.id == flower_id).first()\r\n    flowers = Flower.query.all()\r\n    if request.method == 'POST':\r\n        if request.values.get('d'):\r\n            print(request.values.get('d'))\r\n            db.session.delete(flower)\r\n            db.session.commit()\r\n            return render_template('FlowerGallery.html', title='Flowers', flowers=flowers)\r\n    return render_template('FlowerGallery.html', title='Flowers', flowers=flowers)\r\n\r\n\r\n@app.route('/profile', methods=['GET', 'POST'])\r\ndef profile():\r\n    if session.get(\"USERNAME\") is None:\r\n        return redirect(\"login\")\r\n    else:\r\n        username = session.get(\"USERNAME\")\r\n        user = User.query.filter(User.username == username).first()\r\n        user_id = user.id\r\n        orders_in_db = Orders.query.filter(Orders.user_id == user_id).all()\r\n        flag = 1\r\n        if orders_in_db is not None:\r\n            for order in orders_in_db:\r\n                if order.state == 'unpayment':\r\n                    flag = 0\r\n        else:\r\n            flag = 1\r\n        if flag == 1:\r\n            order = Orders(price=0, name=user.username, destination=\"Beijing university of technology\",\r\n                          state=\"unpayment\", number=100, way=\"deliver\", user_id=user.id)\r\n            db.session.add(order)\r\n            db.session.commit()\r\n            orders_in_db = Orders.query.filter(Orders.user_id == user_id).all()\r\n        order_in_db = Orders.query.filter(and_(Orders.state == \"unpayment\", Orders.user_id == user_id)).first()\r\n        want_in_db = Want.query.filter(Want.user_id == user_id).first()\r\n        basket_in_db_list = Basket.query.filter(\r\n            and_(Basket.order_id == order_in_db.id, Basket.user_id == user_id)).all()\r\n        basketlike_in_db_list = Basketlike.query.filter(Basketlike.want_id == want_in_db.id,\r\n                                                        Basketlike.user_id == user_id).all()\r\n        basket_length = len(basket_in_db_list)\r\n        basketlike_length = len(basketlike_in_db_list)\r\n        posts_query = Flower.query\r\n        posts = posts_query.filter().all()\r\n        '''print(posts)'''\r\n        total = 0\r\n        for basket in basket_in_db_list:\r\n            total = total + basket.total * basket.quantity\r\n        form = ChangePasswordForm()\r\n        if form.validate_on_submit():\r\n            user = User.query.filter(User.username == username).first()\r\n            if not check_password_hash(user.password_hash, form.passwordold.data):\r\n                flash('Wrong Password')\r\n                return redirect(url_for('profile'))\r\n            if form.password.data != form.password2.data:\r\n                flash('Passwords do not match!')\r\n                return redirect(url_for('profile'))\r\n            passw_hash = generate_password_hash(form.password.data)\r\n            user = User.query.filter(User.username == username).first()\r\n            user.password_hash=passw_hash\r\n            db.session.commit()\r\n            print(\"change password successfully\")\r\n            return redirect('index')\r\n\r\n    return render_template('profile.html',username=username,orders=orders_in_db,form=form, baskets=basket_in_db_list, length=basket_length, total=total,\r\n                           order=order_in_db, basketslike=basketlike_in_db_list, lengthlike=basketlike_length,posts=posts)\r\n\r\n@app.route('/ModifyOrder/<order_id>', methods=['GET', 'POST'])\r\ndef ModifyOrder(order_id):\r\n    order = Orders.query.filter(Orders.id == order_id).first()\r\n    baskets = Basket.query.filter(Basket.order_id == order_id).all()\r\n    flowers = Flower.query.all()\r\n    return render_template('ModifyOrders.html', title='ModifyOrder', order=order, baskets=baskets,flowers=flowers)\r\n\r\n\r\n@app.route('/Order_state_C/<order_id>', methods=['GET', 'POST'])\r\ndef Order_state_C(order_id):\r\n    order = Orders.query.filter(Orders.id == order_id).first()\r\n    order.state = 'Completed'\r\n    db.session.commit()\r\n    return redirect(url_for('ModifyOrder', order_id=order.id))\r\n\r\n\r\n@app.route('/Order_state_T/<order_id>', methods=['GET', 'POST'])\r\ndef Order_state_T(order_id):\r\n    order = Orders.query.filter(Orders.id == order_id).first()\r\n    order.state = 'Transporting'\r\n    db.session.commit()\r\n    return redirect(url_for('ModifyOrder', order_id=order.id))\r\n\r\n\r\n@app.route('/Order_state_L/<order_id>', methods=['GET', 'POST'])\r\ndef Order_state_L(order_id):\r\n    order = Orders.query.filter(Orders.id == order_id).first()\r\n    order.state = 'Lated'\r\n    db.session.commit()\r\n    return redirect(url_for('ModifyOrder', order_id=order.id))\r\n\r\n\r\n@app.route('/Order_Delete/<order_id>', methods=['GET', 'POST'])\r\ndef Order_Delete(order_id):\r\n    order = Orders.query.filter(Orders.id == order_id).first()\r\n    orders = Orders.query.all()\r\n    if request.method == \"POST\":\r\n        if request.values.get('d'):\r\n            db.session.delete(order)\r\n            db.session.commit()\r\n            return redirect(url_for('OrderDisplay'))\r\n        return redirect(url_for('OrderDisplay'))\r\n    return redirect(url_for('OrderDisplay'))\r\n\r\n\r\n@app.route('/Change_Address/<order_id>', methods=['GET', 'POST'])\r\ndef Change_Address(order_id):\r\n    order = Orders.query.filter(Orders.id == order_id).first()\r\n    print(request.values.get('text'))\r\n    print(request.values.get('c'))\r\n    if request.method == 'POST':\r\n        if request.values.get('c'):\r\n            order.destination = request.values.get('text')\r\n            db.session.commit()\r\n            return redirect(url_for('ModifyOrder', order_id=order.id))\r\n    if request.method == 'GET':\r\n        print(request.method)\r\n        return redirect(url_for('ModifyOrder', order_id=order.id))\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/newsapp/routes.py b/newsapp/routes.py
--- a/newsapp/routes.py	(revision 5eaa6a6ba8576403dede54d4e06fa0f8debd2187)
+++ b/newsapp/routes.py	(date 1621407241440)
@@ -1057,7 +1057,7 @@
     fig = plt.figure(figsize=(20, 6))
     plt.style.use('ggplot')
     ax = fig.add_subplot(1, 1, 1)
-    lab = ax.set_xticklabels(labels=xaxis, rotation=40, fontsize='xx-large')
+    """lab = ax.set_xticklabels(labels=xaxis, rotation=40, fontsize='xx-large')"""
     ax.set_title('Revenue In Last Month')
     plt.plot(xaxis, price, 'go--')
     # plt.show()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"a1e85ceb-f8b8-4f7a-a03d-aeda75464efe\" name=\"Default Changelist\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Flask Main\" />\r\n        <option value=\"CSS File\" />\r\n        <option value=\"JavaScript File\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\\nApp: %s [%s]\\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/newsapp/templates/newindex.html\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/newsapp/static/scripts/index.js\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/newsapp/forms.py\" root0=\"SKIP_INSPECTION\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1r0XMYHC0A0L2Hrg5Ebf0r1WiJc\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"DatabaseDriversLRU\" value=\"sqlite\" />\r\n    <property name=\"DefaultHtmlFileTemplate\" value=\"HTML File\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/newsapp/static/scripts\" />\r\n    <property name=\"list.type.of.created.stylesheet\" value=\"CSS\" />\r\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\14253\\Desktop\\flower shop\\Online-flower-shop\\newsapp\\static\\scripts\" />\r\n      <recent name=\"C:\\Users\\EZRA\\Desktop\\flower\\Online-flower-shop\\newsapp\\templates\" />\r\n      <recent name=\"C:\\Users\\EZRA\\Desktop\\flower\\Online-flower-shop\\newsapp\" />\r\n      <recent name=\"C:\\Users\\14253\\Desktop\\flower shop\\Online-flower-shop\\newsapp\\templates\" />\r\n      <recent name=\"C:\\Users\\EZRA\\Desktop\\newFlower\\newFlower\\newsapp\\static\\images\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.app\">\r\n    <configuration name=\"Deploy to Host\" type=\"DEPLOY_HOST_RUN_CONFIGURATION\" factoryName=\"Deploy to Host\">\r\n      <option name=\"accountModel\" />\r\n      <option name=\"accountModels\" />\r\n      <option name=\"address\" />\r\n      <option name=\"afterCommand\" value=\"nohup python3 /opt/Online-flower-shop/app.py &gt;&gt; /opt/Online-flower-shop/nohup.out &amp;   \" />\r\n      <option name=\"alreadyReset\" value=\"true\" />\r\n      <option name=\"autoOpen\" value=\"false\" />\r\n      <option name=\"beforeCommand\" value=\"rm -rf /opt/Online-flower-shop\" />\r\n      <option name=\"defaultTabIdx\" value=\"0\" />\r\n      <option name=\"ecsInstance\">\r\n        <EcsInstance>\r\n          <option name=\"OSType\" />\r\n          <option name=\"instanceId\" />\r\n          <option name=\"instanceName\" />\r\n          <option name=\"netType\" />\r\n          <option name=\"privateIps\" />\r\n          <option name=\"publicIps\" />\r\n          <option name=\"regionId\" />\r\n          <option name=\"tags\" />\r\n        </EcsInstance>\r\n      </option>\r\n      <option name=\"ecsInstances\" />\r\n      <option name=\"hostIds\">\r\n        <list>\r\n          <option value=\"1\" />\r\n        </list>\r\n      </option>\r\n      <option name=\"hostTagId\" value=\"0\" />\r\n      <option name=\"location\" value=\"/opt/\" />\r\n      <option name=\"pathOrUrl\" value=\"C:\\Users\\14253\\Desktop\\flower shop\\Online-flower-shop\" />\r\n      <option name=\"tagId\" value=\"0\" />\r\n      <option name=\"terminalCommand\" />\r\n      <option name=\"type\" value=\"HOST\" />\r\n      <option name=\"uploadType\" value=\"FILE\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"Online-flower-shop\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"Online-flower-shop\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"D:\\anaconda\\envs\\flasktest\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/newsapp/__init__.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"newFlower\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\EZRA\\PycharmProjects\\newFlower\\venv\\Scripts\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/app.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"app\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Online-flower-shop\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"D:\\anaconda\\envs\\flasktest\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/app.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Deploy to Host.Deploy to Host\" />\r\n      <item itemvalue=\"Python.app\" />\r\n      <item itemvalue=\"Python.Online-flower-shop\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SshConsoleOptionsProvider\">\r\n    <option name=\"myEncoding\" value=\"UTF-8\" />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"a1e85ceb-f8b8-4f7a-a03d-aeda75464efe\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1618113933857</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1618113933857</updated>\r\n      <workItem from=\"1618113955903\" duration=\"16139000\" />\r\n      <workItem from=\"1618142937532\" duration=\"432000\" />\r\n      <workItem from=\"1618144502071\" duration=\"7717000\" />\r\n      <workItem from=\"1618189653767\" duration=\"6191000\" />\r\n      <workItem from=\"1618318373758\" duration=\"4211000\" />\r\n      <workItem from=\"1618366308105\" duration=\"499000\" />\r\n      <workItem from=\"1618366949974\" duration=\"15839000\" />\r\n      <workItem from=\"1618471023939\" duration=\"13181000\" />\r\n      <workItem from=\"1618655537038\" duration=\"13847000\" />\r\n      <workItem from=\"1618708138653\" duration=\"4524000\" />\r\n      <workItem from=\"1618713663922\" duration=\"18820000\" />\r\n      <workItem from=\"1618794393631\" duration=\"20723000\" />\r\n      <workItem from=\"1618835686189\" duration=\"6024000\" />\r\n      <workItem from=\"1618968439275\" duration=\"13886000\" />\r\n      <workItem from=\"1618994295210\" duration=\"1711000\" />\r\n      <workItem from=\"1619054119868\" duration=\"474000\" />\r\n      <workItem from=\"1619405146430\" duration=\"624000\" />\r\n      <workItem from=\"1619793648010\" duration=\"6264000\" />\r\n      <workItem from=\"1619832775748\" duration=\"14211000\" />\r\n      <workItem from=\"1619922901921\" duration=\"8850000\" />\r\n      <workItem from=\"1620097217589\" duration=\"1762000\" />\r\n      <workItem from=\"1620267698033\" duration=\"1223000\" />\r\n      <workItem from=\"1620269331162\" duration=\"57000\" />\r\n      <workItem from=\"1620269391853\" duration=\"900000\" />\r\n      <workItem from=\"1620439028250\" duration=\"108000\" />\r\n      <workItem from=\"1620570184018\" duration=\"4031000\" />\r\n      <workItem from=\"1620575015517\" duration=\"925000\" />\r\n      <workItem from=\"1620607267363\" duration=\"7874000\" />\r\n      <workItem from=\"1620707400621\" duration=\"6297000\" />\r\n      <workItem from=\"1620717329442\" duration=\"62000\" />\r\n      <workItem from=\"1620717392927\" duration=\"11679000\" />\r\n      <workItem from=\"1620793134574\" duration=\"6794000\" />\r\n      <workItem from=\"1620867746581\" duration=\"5402000\" />\r\n      <workItem from=\"1621017348885\" duration=\"1855000\" />\r\n      <workItem from=\"1621132195947\" duration=\"85000\" />\r\n      <workItem from=\"1621132283762\" duration=\"12525000\" />\r\n      <workItem from=\"1621148686769\" duration=\"5882000\" />\r\n      <workItem from=\"1621222579957\" duration=\"8501000\" />\r\n      <workItem from=\"1621244384443\" duration=\"14491000\" />\r\n      <workItem from=\"1621300643697\" duration=\"2771000\" />\r\n      <workItem from=\"1621386560634\" duration=\"6828000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/newsapp/routes.py</url>\r\n          <line>498</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/newsapp/routes.py</url>\r\n          <line>683</line>\r\n          <option name=\"timeStamp\" value=\"5\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"javascript\">\r\n          <url>file://$PROJECT_DIR$/newsapp/static/scripts/index1.js</url>\r\n          <line>1</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/newFlower$app.coverage\" NAME=\"app Coverage Results\" MODIFIED=\"1618492058809\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Online_flower_shop$Online_flower_shop.coverage\" NAME=\"Online-flower-shop Coverage Results\" MODIFIED=\"1620740272172\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/Online_flower_shop$app.coverage\" NAME=\"app Coverage Results\" MODIFIED=\"1621404191469\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n    <SUITE FILE_PATH=\"coverage/newFlower4_17$app.coverage\" NAME=\"app Coverage Results\" MODIFIED=\"1618708256048\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5eaa6a6ba8576403dede54d4e06fa0f8debd2187)
+++ b/.idea/workspace.xml	(date 1621408915045)
@@ -4,7 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="a1e85ceb-f8b8-4f7a-a03d-aeda75464efe" name="Default Changelist" comment="" />
+    <list default="true" id="a1e85ceb-f8b8-4f7a-a03d-aeda75464efe" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/newsapp/routes.py" beforeDir="false" afterPath="$PROJECT_DIR$/newsapp/routes.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/newsapp/static/images/Revenue.png" beforeDir="false" afterPath="$PROJECT_DIR$/newsapp/static/images/Revenue.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/newsapp/templates/Charts.html" beforeDir="false" afterPath="$PROJECT_DIR$/newsapp/templates/Charts.html" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -66,7 +72,7 @@
     <property name="last_opened_file_path" value="$PROJECT_DIR$/newsapp/static/scripts" />
     <property name="list.type.of.created.stylesheet" value="CSS" />
     <property name="restartRequiresConfirmation" value="false" />
-    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
+    <property name="settings.editor.selected.configurable" value="com.alibabacloud.intellij.config.RegionConfigurable" />
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
@@ -283,7 +289,7 @@
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/newFlower$app.coverage" NAME="app Coverage Results" MODIFIED="1618492058809" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/Online_flower_shop$Online_flower_shop.coverage" NAME="Online-flower-shop Coverage Results" MODIFIED="1620740272172" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/Online_flower_shop$app.coverage" NAME="app Coverage Results" MODIFIED="1621404191469" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Online_flower_shop$app.coverage" NAME="app Coverage Results" MODIFIED="1621407241449" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/newFlower4_17$app.coverage" NAME="app Coverage Results" MODIFIED="1618708256048" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
